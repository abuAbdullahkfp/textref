Optional Packages for Django Rest Framework
--------------------------------------------------
PyYAML
Markdown
Pygments
django-filter
django-guardian
--------------------------------------------------
install Rest Framework using

pip install djangorestframework
installed_apps = ['rest_framework',]
--------------------------------------------------
import json

d = {'key':'value'}

a = json.dumps(d) converts python dict to json

b = json.loads(a) converts json to python dict
--------------------------------------------------
from rest_framework.renderers import JSONRenderer
from django.http import JsonResponse

def student_detail(request):
    student = Student.objects.get(id=1)
    serializer = StudentSerializer(student, many=True)
    #json_data =  JSONRenderer().render(serializer.data)
    #return HttpResponse(json_data, content_type='application/json')
    json_data = JsonResponse(serializer.data)
    return json_data
    JsonResponse(serializer.data, safe=False)
--------------------------------------------------
import io
from rest_framework.parsers import JSONParser

io.BytesIO(json_data)
JSONParser().parse(stream)

from rest_framework.views import csrf_exempt

@method_decorator(csrf_exempt, name='dispatch')

--------------------------------------------------
from rest_framework.decorators import api_view
from rest_framework.response import Response
from rest_framework import status

Response(data, status='', headers='', content_type='')
--------------------------------------------------
django.views.decorators.csrf import csrf_exempt
django.utils.decorators import method_decorator
------------------------------------------------
class ArticleSerializer(serializers.ModelSerializer):
  title = serializers.CharField(read_only=True)
  class Meta:
    model = Article
    fields = ['id', 'title', 'author']
    read_only_fields = ['title']
    extra_kwargs = {'title':{'read_only':True}}
---------------------------------------------
from rest_framework.decorators import api_view
from rest_framwork.response import Response
from rest_framework import status

status.HTTP_200

@api_view(['GET', 'POST', 'PUT', 'DELETE'])
request.data 

for patch partial = True
---------------------------------------------
from rest_framework.views import APIView
from rest_framework.generics import GenericAPIView
from rest_framework.mixins import CreateModelMixin

serializer_class = ''
queryset = ''
lookup_field = 'default=pk, id'
lookup_url_kwarg = ''
pagination_class = ''
filter_backends

get_queryset(self)
get_object(self)
get_serializer_class(self)
get_serializer_context(self)
get_serializer(self, instance=None, data=None, many=False, partial=False)
get_paginated_reponse(self, data)
paginate_queryset(self, queryset)
filter_queryset(self, queryset)

ListModelMixin
CreateModelMixin
RetrieveModelMixin
UpdateModelMixin
DestroyModelMixin

list(request, *args, **kwargs)
create(request, *args, **kwargs)
retrieve(request, *args, **kwargs)
update(request, *args, **kwargs)
destroy(request, *args, **kwargs)
---------------------------------------------
ListAPIView
CreateAPIView
RetrieveAPIView
UpdateAPIView
DestroyAPIView
ListCreateAPIView
RetrieveUpdateDestroyAPIView
---------------------------------------------
from rest_framework.viewsets import ViewSet, ModelViewSet
from rest_framework.routers import DefaultRouter

def list()
def create()
def retrieve()
def update()
def partial_update()
def destroy()
-------------------------------------------------
Permission classes

AllowAny
IsAuthenticated
IsAdminUser
IsAuthenticatedOrReadOnly
DjangoModelPermissions
DjangoModelPermissionsOrAnonReadOnly
DjangoObjectPermissions
Custom Permissions

from rest_framework.authentication import BasicAuthentication, SessionAuthentication

from rest_framework.permissions import *->[AllowAny, IsAuthenticated ..etc]


Gobally in settings file
REST_FRAMEWORK = {
     
'DEFAULT_AUTHENTICATION_CLASSES':['rest_framework.authentication.BasicAuthentication'],

''DEFAULT_PERMISSION_CLASSES':['rest_framework.permissions.IsAuthenticated'],

}  equivalent to attributes in classes 
    authentication_classes = [BasicAuthentication]
  permission_classes = [IsAuthenticated]

path('anything/', (include('rest_framework.urls', namespace='rest_framework'))) this url for login and logout sessionauthentication

custom permissions

has_permission(self, request, view)
has_object_permission(self, request,view,obj)

from rest_framework.permissions import BasePermission


class MyPermission(BasePermission):

  def has_permission(self, request, view):

function based views use decorators

from rest_framework.decorators import api_view, authentication_classes, permission_classes
---------------------------------------------

Third party packages for permissions and authentcation for rest framework django

DRF- Access Policy
Composed Permission
REST Condition
DRY Rest Permissions
Django Rest Framework Roles
Django Rest Framework Role Filters
Django Rest Framework PSQ
---------------------------------------------
tokens auth

INSTALLED_APPS = [
    'rest_framework.authtoken',
]

Generate Token

Using Admin Application
Using Django manage.py command
python manage.py drf_create_token <username>
Using (by exposing an Api endpoint)

from rest_framework.authtoken.views import obtain_auth_token

urlpatterns = [path('anything/', obtain_auth_token)] 

pip install httpie

http POST http://127.0.0.1:8000/anythin/ username= 'admin' password = 'admin'
------------------------------
from rest_framework.authtoken.views import ObtainAuthToken
from rest_framework.authtoken.models import Token
from rest_framework.response import Response

class CustomAuthToken(ObtainAuthToken):

    def post(self, request, *args, **kwargs):
        serializer = self.serializer_class(data=request.data,
                                           context={'request': request})
        serializer.is_valid(raise_exception=True)
        user = serializer.validated_data['user']
        token, created = Token.objects.get_or_create(user=user)
        return Response({
            'token': token.key,
            'user_id': user.pk,
            'email': user.email
        })

from django.conf import settings
from django.db.models.signals import post_save
from django.dispatch import receiver
from rest_framework.authtoken.models import Token

@receiver(post_save, sender=settings.AUTH_USER_MODEL)
def create_auth_token(sender, instance=None, created=False, **kwargs):
    if created:
        Token.objects.create(user=instance)
-------------------------------------

---------------------------------------------

JWT
----------

pip install djangorestframework-simplejwt

gobally in setting files
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES':(
      'rest_framework_simplejwt.authentication.JWTAuthentication',
)
}

from rest_framework_simplejwt.views import TokenObtainPairView, TokenRefreshView, TokenVerifyView

urlpatterns = [
    path('gettoken/', TokenObtainPairView.as_view(), name='token_obtain_pair')
    path('refreshtoken/', TokenRefreshView.as_view(), name='token_refresh'),
    path('verifytoken/',TokenVerifyView.as_view(), 
   name='token_verify'),
]

from datetime import timedelta

SIMPLE_JWT = {
  'ACCESS_TOKEN_LIFETIME': timedelta(minute=5),
  'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
  'ROTATE_REFRESH_TOKENS': False,
  'BLACKLIST_AFTER_ROTATION: TRUE,

  'ALGORITHM': 'HS256',
  'SIGNING_KEY': setting.SECRET_KEY,
  'VERIFYING_KEY': None,
}

http http://127.0.0.1:8000/api/ 'Authorization:Bearer ___________Token code'

http -f POST http://127.0.0.1:8000/api/ isert data 

'Authorization:Bearer ___________Token code'


http -f PUT http://127.0.0.1:8000/api/4/ isert data 

'Authorization:Bearer ___________Token code'

same with patch and delete

--------------------------------------------------
from rest_framework.throttling import AnonRateThrottle, UserRateThrottle, ScopedRateThrottle

throttle_classes = [AnonRateThrottle, UserRateThrottle]

throttle_scope = 'anything'

REST_FRAMEWORK = {
  'DEFAULT_THROTTLE_RATES': {
       'anon': '2/days',
       'user': '5/hour',
       'jack': '3/min',
       'anything': '5/hour'
}
}

seperate throttle file throttle.py

from reat_framework.throttling import UserRateThrottle

class JackRateThrottle(UserRateThrottle):
scope = 'jack'
-----------------------------------------------------
filter
----------
pip install django-filter
installed_apps = 'django_filters'


REST_FRAMEWORK = {
    'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend']
}

from django_filters.rest_framework import DjangoFilterBackend

filter_backends = [DjangoFilterBackend]
filterset_fields = ['name', 'author']

SearchFilter
---------------------
from rest_framework.filters import SearchFilter

filter_backends = [SearchFilter]
search_fields = ['author']

http://127.0.0.1:8000/api/?search=''


search_fields = ['^author'] 

'^' Starts-with search
'=' Exact matches
'@' Full-text search
'$' Regex search          

REST_FRAMEWORK = {
       'SEARCH_PARAM': 'q',
}

http://127.0.0.1:8000/api/?q=''
--------------------------------------------------
Ordering filter
------------------

from rest_framework.filters import OrderingFilter

filter_backends = [OrderingFilter]
ordering_fields = ['author']
--------------------------------------------------

Pagination
-----------------

Pagination Global Setting

REST_FRAMEWORK = {

       'DEFAULT_PAGINATION_CLASS': 'rest.framework.pagination.PageNumberPagination',
'PAGE_SIZE':5

}

pagination_class = PageNumberPagination

custom pagination class

class MyPageNumberPagination(PageNumberPagination):

page_size = 5
page_size_query_param = 'records'
max_page_size = 7

pagination_class = MyPageNumberPagination


---------------------------------------------
CORS

pip install django-cors-headers

'corsheaders',


middleware take it from the website



---------------------------------------------

'X-CSRFToken': csrftoken

---------------------------------------------

def validate_<fieldname>(self, value):
      raise serializers.ValidationError('')

def validata(self, data):
     name = data.get('name')
     city = data.get('city')
---------------------------------------------
serializers.StringRelatedField(many=True, read_only=True)

serializers.HyperlinkedRelatedField(many=True, read_only=True, view_name='song-detail')

serializers.SlugRelatedField(many=True, read_only=True, slug_field='title')

---------------------------------------------



